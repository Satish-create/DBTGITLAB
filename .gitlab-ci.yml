# Globals defined at the bottom of the file

# Job Templates

.job_template: &job_definition
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  tags:
    - analytics

.job_housekeeping: &job_housekeeping
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  tags:
    - housekeeping

.orchestrate: &orchestrate
  image: registry.gitlab.com/meltano/analytics/orchestrate:latest
  variables:
    GIT_STRATEGY: clone
    MELT_JOBS_HOME: orchestrate_jobs/
  tags:
    - analytics


# ---------------------------------------------------------------------------

# Stages
# Note some jobs come from global 'include' statements
stages:
  - build # /orchestrate/scheduler-ci.yml
  - test # /orchestreate/scheduler-ci.yml
  - review
  - setup
  - orchestrate
  - extract # extract/extract-ci.yml
  - model # transform/cloudsql-dbt/cloudsql-dbt-ci.ym transform/snowflake-dbt/snowflake-dbt-ci.yml
  - update
  - review_stop

include:
  - "extract/extract-ci.yml"
  - "transform/cloudsql-dbt/cloudsql-dbt-ci.yml"
  - "transform/snowflake-dbt/snowflake-dbt-ci.yml"
  - "/orchestrate/scheduler-ci.yml"

# Orchestrate

orchestrate:
  <<: *orchestrate
  stage: orchestrate
  variables:
    CLOUD_SDK_REPO: "cloud-sdk-stretch"
  script:
    - wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O /usr/bin/cloud_sql_proxy
    - chmod +x /usr/bin/cloud_sql_proxy
    - echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    - apt-get update && apt-get install -y google-cloud-sdk
    - pip install pandas requests
    - echo $MELT_JOBS_HOME
    - ci_helpers.py use_proxy "orchestrate scheduler"
  only:
    refs:
      - master
  except:
    variables:
      - $ORCHESTRATE_JOB

# Stage: review

review: &review
  stage: review
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  variables:
    GIT_STRATEGY: clone
  tags:
    - analytics
  script:
    - ci_helpers.py manage_instances
  environment:
    name: review/$CI_COMMIT_REF_NAME
    on_stop: review_stop
  only:
    - branches
  except:
    - master
    - $TEST_PIPELINE

review_refresh:
  <<: *review
  variables:
    FORCE: "true"
  when: manual

# Stage: setup

refresh_dev: &refresh_dev
  <<: *job_housekeeping
  stage: setup
  variables:
    GCP_INSTANCE_NAME: $GCP_PRODUCTION_INSTANCE_NAME
    GIT_STRATEGY: clone
  script:
    - ci_helpers.py refresh_dev_instance
    - ci_helpers.py use_proxy "python3 orchestration/grant_roles.py"
  only:
    refs:
      - master
    variables:
      - $REFRESH_DEV

force_refresh_dev:
  <<: *refresh_dev
  variables:
    GCP_INSTANCE_NAME: $GCP_PRODUCTION_INSTANCE_NAME
    GIT_DEPTH: 1
    FORCE: "true"
  when: manual

update_db: &update_db
  <<: *job_housekeeping
  stage: setup
  script:
    - ci_helpers.py use_proxy "python3 orchestration/grant_roles.py"
  only:
    - branches
  except:
    - master
    - $TEST_PIPELINE

force_update_db:
  <<: *update_db
  when: manual


# Stage: update

sfdc_update:
  stage: update
  <<: *job_definition
  script:
    - ci_helpers.py use_proxy "python3 transform/sfdc_processor.py"
  only:
    refs:
      - master
    variables:
      - $SFDC_UPDATE

sfdc_snapshot:
  stage: update
  <<: *job_definition
  script:
    - ci_helpers.py use_proxy "python3 extract/util/snapshot.py"
  only:
    refs:
      - master
    variables:
      - $SFDC_SNAPSHOT

sfdc_update_manual:
  stage: update
  <<: *job_definition
  script:
    - ci_helpers.py use_proxy "python3 transform/sfdc_processor.py"
  only:
    refs:
      - branches
  when: manual

sfdc_snapshot_manual:
  stage: update
  <<: *job_definition
  script:
    - ci_helpers.py use_proxy "python3 extract/util/snapshot.py"
  only:
    refs:
      - branches
  when: manual

# Stage: review_stop

review_stop:
  stage: review_stop
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  variables:
    GIT_STRATEGY: none
  script:
    - git clone $CI_REPOSITORY_URL
    - analytics/orchestration/ci_helpers.py delete_instance
  when: manual
  allow_failure: true
  only:
    - branches
  except:
    - master
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop

#--------------------------------------------------------------------------

# Global definitions


variables:
  PYTHONPATH: "$CI_PROJECT_DIR/extract/:$CI_PROJECT_DIR/extract/shared_modules/:$PYTHONPATH"

before_script:
  - export PATH="$CI_PROJECT_DIR/orchestration/:$PATH"
  - export PYTHONPATH="$CI_PROJECT_DIR/extract/:$CI_PROJECT_DIR/extract/shared_modules/:$PYTHONPATH"
