# Globals defined at the bottom of the file

# Job Templates

.job_template: &job_definition
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  tags:
    - analytics

.job_housekeeping: &job_housekeeping
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  tags:
    - housekeeping

# ---------------------------------------------------------------------------

# Stages
# Note some jobs come from global 'include' statements
stages:
  - build # Not in use
  - test # Not in use
  - review
  - setup
  - extract # extract/extract-ci.yml
  - model #  transform/snowflake-dbt/snowflake-dbt-ci.yml
  - model_tests #  transform/snowflake-dbt/snowflake-dbt-ci.yml
  - update
  - publish
  - review_stop

include:
  - "extract/extract-ci.yml"
  - "transform/snowflake-dbt/snowflake-dbt-ci.yml"

# Stage: review

cloudsql_review: &cloudsql_review
  stage: review
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  variables:
    GIT_STRATEGY: clone
  tags:
    - analytics
  script:
    - ci_helpers.py manage_instances
  environment:
    name: review/$CI_COMMIT_REF_NAME
    on_stop: review_stop
  only:
    - branches
  when: manual

cloudsql_review_refresh:
  <<: *cloudsql_review
  variables:
    FORCE: "true"
  when: manual

snowflake_review: &snowflake_review
  stage: review
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  variables:
    GIT_STRATEGY: clone
    SNOWFLAKE_DATABASE: $CI_COMMIT_REF_NAME
  tags:
    - analytics
  script:
    - pip3 install snowflake-sqlalchemy
    - pip3 install -U keyrings.alt
    - manage_snowflake.py manage_clones
  environment:
    name: review/$CI_COMMIT_REF_NAME
    on_stop: review_stop
  only:
    refs:
      - branches
    variables:
      - $SNOWFLAKE_SYSADMIN_ROLE
      - $SNOWFLAKE_LOAD_WAREHOUSE
      - $SNOWFLAKE_LOAD_DATABASE       # make sure the guard works
      - $SNOWFLAKE_TRANSFORM_DATABASE  # make sure the guard works
  except:
    refs:
      - master
    variables:
      - $SNOWFLAKE_DATABASE == $SNOWFLAKE_LOAD_DATABASE
      - $SNOWFLAKE_DATABASE == $SNOWFLAKE_TRANSFORM_DATABASE
      - $TEST_PIPELINE

snowflake_review_refresh:
  <<: *snowflake_review
  script:
    - pip3 install -U snowflake-sqlalchemy
    - manage_snowflake.py manage_clones --force
  when: manual

# Stage: setup

update_db: &update_db
  <<: *job_housekeeping
  stage: setup
  script:
    - ci_helpers.py use_proxy "python3 orchestration/grant_roles.py"
  only:
    - branches
  when: manual

.snowflake_permissions: &snowflake_permissions
  stage: setup
  <<: *job_definition
  image:
    name: registry.gitlab.com/meltano/meltano/runner:v0.3.0
    entrypoint: [""]
  script:
    - check_ci_cd_vars.py --file load/snowflake/required_ci_cd_vars.yaml
    - meltano permissions grant load/snowflake/snowflake_roles/config.yml --db snowflake $DRY

permission_bot_snowflake_dry:
  <<: *snowflake_permissions
  variables:
    DRY: "--dry"
    PERMISSION_BOT_USER: $SNOWFLAKE_PERMISSION_USER
    PERMISSION_BOT_PASSWORD: $SNOWFLAKE_PERMISSION_PASSWORD
    PERMISSION_BOT_ACCOUNT: $SNOWFLAKE_ACCOUNT
    PERMISSION_BOT_DATABASE: $SNOWFLAKE_PERMISSION_DATABASE
    PERMISSION_BOT_ROLE: $SNOWFLAKE_PERMISSION_ROLE
    PERMISSION_BOT_WAREHOUSE: $SNOWFLAKE_PERMISSION_WAREHOUSE
  only:
    refs:
      - master
    variables:
      - $PERMISSION_BOT_SNOWFLAKE

permission_bot_snowflake_dry_manual:
  <<: *snowflake_permissions
  variables:
    DRY: "--dry"
    PERMISSION_BOT_USER: $SNOWFLAKE_PERMISSION_USER
    PERMISSION_BOT_PASSWORD: $SNOWFLAKE_PERMISSION_PASSWORD
    PERMISSION_BOT_ACCOUNT: $SNOWFLAKE_ACCOUNT
    PERMISSION_BOT_DATABASE: $SNOWFLAKE_PERMISSION_DATABASE
    PERMISSION_BOT_ROLE: $SNOWFLAKE_PERMISSION_ROLE
    PERMISSION_BOT_WAREHOUSE: $SNOWFLAKE_PERMISSION_WAREHOUSE
  only:
    - branches
  except:
    - master
  when: manual

# Stage: update

sfdc_snapshot: &sfdc_snapshot
  stage: update
  <<: *job_definition
  script:
    - ci_helpers.py use_proxy "python3 extract/util/snapshot_opportunity.py"
    - ci_helpers.py use_proxy "python3 extract/util/snapshot_account.py"
  only:
    refs:
      - master
    variables:
      - $SFDC_SNAPSHOT

sfdc_snapshot_manual:
  stage: update
  <<: *sfdc_snapshot
  only:
    refs:
      - branches
  when: manual


# Stage: publish

# ======
# Pages
# ======
.variables: &pages_job__variables
  SNOWFLAKE_DATABASE: $CI_COMMIT_REF_NAME
  SNOWFLAKE_ROLE: $SNOWFLAKE_TRANSFORM_ROLE
  SNOWFLAKE_WAREHOUSE: $SNOWFLAKE_TRANSFORM_WAREHOUSE

.pages_job_template: &pages_job_template
  stage: publish
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  variables: *pages_job__variables
  script:
    - generate_dbt_docs.sh
  artifacts:
    paths:
    - public
  tags:
    - analytics

pages:
  <<: *pages_job_template
  variables:
    <<: *pages_job__variables
    SNOWFLAKE_DATABASE: $SNOWFLAKE_TRANSFORM_DATABASE
  only:
    refs:
      - master
    variables:
      - $DEPLOY_DBT_PAGES

test_dbt_pages:
  <<: *pages_job_template
  only:
    - branches
  except:
    - master
  when: manual


# Stage: review_stop

review_stop:
  stage: review_stop
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  variables:
    GIT_STRATEGY: none
    SNOWFLAKE_DATABASE: $CI_COMMIT_REF_NAME
  script:
    - git clone $CI_REPOSITORY_URL
    - pip3 install -U snowflake-sqlalchemy
    - analytics/orchestration/manage_snowflake.py delete_clone
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    variables:
      - $SNOWFLAKE_SYSADMIN_ROLE
      - $SNOWFLAKE_LOAD_WAREHOUSE
      - $SNOWFLAKE_LOAD_DATABASE       # make sure the guard works
      - $SNOWFLAKE_TRANSFORM_DATABASE  # make sure the guard works
  except:
    refs:
      - master
    variables:
      - $SNOWFLAKE_DATABASE == $SNOWFLAKE_LOAD_DATABASE
      - $SNOWFLAKE_DATABASE == $SNOWFLAKE_TRANSFORM_DATABASE
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  tags:
    - housekeeping

#--------------------------------------------------------------------------

# Global definitions


variables:
  PYTHONPATH: "$CI_PROJECT_DIR/extract/:$CI_PROJECT_DIR/extract/shared_modules/:$PYTHONPATH"

before_script:
  - export PATH="$CI_PROJECT_DIR/orchestration/:$PATH"
  - export PYTHONPATH="$CI_PROJECT_DIR/extract/:$CI_PROJECT_DIR/extract/shared_modules/:$PYTHONPATH"

