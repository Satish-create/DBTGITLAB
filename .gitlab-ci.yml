# Globals defined at the bottom of the file

# Job Templates

.job_template: &job_definition
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  tags:
    - analytics

.job_housekeeping: &job_housekeeping
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  tags:
    - housekeeping

# ---------------------------------------------------------------------------

# Stages
# Note some jobs come from global 'include' statements
stages:
  - build # Not in use
  - test # Not in use
  - review
  - setup
  - extract # extract/extract-ci.yml
  - model # transform/cloudsql-dbt/cloudsql-dbt-ci.ym transform/snowflake-dbt/snowflake-dbt-ci.yml
  - update
  - review_stop

include:
  - "extract/extract-ci.yml"
  - "transform/cloudsql-dbt/cloudsql-dbt-ci.yml"
  - "transform/snowflake-dbt/snowflake-dbt-ci.yml"

# Stage: review

cloudsql_review: &cloudsql_review
  stage: review
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  variables:
    GIT_STRATEGY: clone
  tags:
    - analytics
  script:
    - ci_helpers.py manage_instances
  environment:
    name: review/$CI_COMMIT_REF_NAME
    on_stop: review_stop
  only:
    - branches
  except:
    - master
    - $TEST_PIPELINE

cloudsql_review_refresh:
  <<: *cloudsql_review
  variables:
    FORCE: "true"
  when: manual

snowflake_review: &snowflake_review
  stage: review
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  variables:
    GIT_STRATEGY: clone
    SF_DATABASE: $CI_COMMIT_REF_NAME
  tags:
    - analytics
  script:
    - pip3 install -U snowflake-sqlalchemy
    - manage_snowflake.py manage_clones
  environment:
    name: review/$CI_COMMIT_REF_NAME
    on_stop: review_stop
  only:
    - branches
  except:
    - master
    - $TEST_PIPELINE

snowflake_review_refresh:
  <<: *snowflake_review
  script:
    - pip3 install -U snowflake-sqlalchemy
    - manage_snowflake.py manage_clones --force
  when: manual

# Stage: setup

refresh_dev: &refresh_dev
  <<: *job_housekeeping
  stage: setup
  variables:
    GCP_INSTANCE_NAME: $GCP_PRODUCTION_INSTANCE_NAME
    GIT_STRATEGY: clone
  script:
    - ci_helpers.py refresh_dev_instance
    - ci_helpers.py use_proxy "python3 orchestration/grant_roles.py"
  only:
    refs:
      - master
    variables:
      - $REFRESH_DEV

force_refresh_dev:
  <<: *refresh_dev
  variables:
    GCP_INSTANCE_NAME: $GCP_PRODUCTION_INSTANCE_NAME
    GIT_DEPTH: 1
    FORCE: "true"
  when: manual

update_db: &update_db
  <<: *job_housekeeping
  stage: setup
  script:
    - ci_helpers.py use_proxy "python3 orchestration/grant_roles.py"
  only:
    - branches
  except:
    - master
    - $TEST_PIPELINE

force_update_db:
  <<: *update_db
  when: manual


# Stage: update

sfdc_update:
  stage: update
  <<: *job_definition
  script:
    - ci_helpers.py use_proxy "python3 transform/sfdc_processor.py"
  only:
    refs:
      - master
    variables:
      - $SFDC_UPDATE

sfdc_snapshot: &sfdc_snapshot
  stage: update
  <<: *job_definition
  script:
    - ci_helpers.py use_proxy "python3 extract/util/snapshot_opportunity.py"
    - ci_helpers.py use_proxy "python3 extract/util/snapshot_account.py"
  only:
    refs:
      - master
    variables:
      - $SFDC_SNAPSHOT

sfdc_update_manual:
  stage: update
  <<: *job_definition
  script:
    - ci_helpers.py use_proxy "python3 transform/sfdc_processor.py"
  only:
    refs:
      - branches
  when: manual

sfdc_snapshot_manual:
  stage: update
  <<: *sfdc_snapshot
  only:
    refs:
      - branches
  when: manual

# Stage: review_stop

review_stop:
  stage: review_stop
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  variables:
    GIT_STRATEGY: none
    SF_DATABASE: $CI_COMMIT_REF_NAME
  script:
    - git clone $CI_REPOSITORY_URL
    - pip3 install -U snowflake-sqlalchemy
    - analytics/orchestration/manage_snowflake.py delete_clone
    - analytics/orchestration/ci_helpers.py delete_instance
  when: manual
  allow_failure: true
  only:
    - branches
  except:
    - master
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  tags:
    - housekeeping

#--------------------------------------------------------------------------

# Global definitions


variables:
  PYTHONPATH: "$CI_PROJECT_DIR/extract/:$CI_PROJECT_DIR/extract/shared_modules/:$PYTHONPATH"

before_script:
  - export PATH="$CI_PROJECT_DIR/orchestration/:$PATH"
  - export PYTHONPATH="$CI_PROJECT_DIR/extract/:$CI_PROJECT_DIR/extract/shared_modules/:$PYTHONPATH"

