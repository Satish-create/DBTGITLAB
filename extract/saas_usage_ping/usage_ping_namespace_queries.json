[
  {
    "counter_name": "usage_activity_by_stage.secure.api_fuzzing_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 7 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) GROUP BY 1",
    "time_window_query": false,
    "level": "namespace"
  },
  {
    "counter_name": "usage_activity_by_stage_monthly.secure.api_fuzzing_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 7 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) AND scans.created_at BETWEEN between_start_date AND between_end_date GROUP BY 1",
    "time_window_query": true,
    "level": "namespace"
  },
  {
    "counter_name": "usage_activity_by_stage.secure.coverage_fuzzing_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 6 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) GROUP BY 1",
    "time_window_query": false,
    "level": "namespace"
  },
  {
    "counter_name": "usage_activity_by_stage_monthly.secure.coverage_fuzzing_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 6 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) AND scans.created_at BETWEEN between_start_date AND between_end_date GROUP BY 1",
    "time_window_query": true,
    "level": "namespace"
  },
  {
    "counter_name": "usage_activity_by_stage.secure.secret_detection_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 5 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) GROUP BY 1",
    "time_window_query": false,
    "level": "namespace"
  },
  {
    "counter_name": "usage_activity_by_stage_monthly.secure.secret_detection_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 5 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) AND scans.created_at BETWEEN between_start_date AND between_end_date GROUP BY 1",
    "time_window_query": true,
    "level": "namespace"
  },
  {
    "counter_name": "usage_activity_by_stage.secure.dependency_scanning_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 2 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) GROUP BY 1",
    "time_window_query": false,
    "level": "namespace"
  },
  {
    "counter_name": "usage_activity_by_stage_monthly.secure.dependency_scanning_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 2 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) AND scans.created_at BETWEEN between_start_date AND between_end_date GROUP BY 1",
    "time_window_query": true,
    "level": "namespace"
  },
  {
    "counter_name": "usage_activity_by_stage.secure.container_scanning_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 3 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) GROUP BY 1",
    "time_window_query": false,
    "level": "namespace"
  },
  {
    "counter_name": "usage_activity_by_stage_monthly.secure.container_scanning_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 3 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) AND scans.created_at BETWEEN between_start_date AND between_end_date GROUP BY 1",
    "time_window_query": true,
    "level": "namespace"
  },
  {
    "counter_name": "usage_activity_by_stage.secure.dast_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 4 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) GROUP BY 1",
    "time_window_query": false,
    "level": "namespace"
  },
  {
    "counter_name": "usage_activity_by_stage_monthly.secure.dast_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 4 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) AND scans.created_at BETWEEN between_start_date AND between_end_date GROUP BY 1",
    "time_window_query": true,
    "level": "namespace"
  },
  {
    "counter_name": "usage_activity_by_stage.secure.sast_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 1 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) GROUP BY 1",
    "time_window_query": false,
    "level": "namespace"
  },
  {
    "counter_name": "usage_activity_by_stage_monthly.secure.sast_scans",
    "counter_query": "SELECT namespaces_xf.namespace_ultimate_parent_id AS id, namespaces_xf.namespace_ultimate_parent_id, COUNT(scans.build_id) AS counter_value FROM prep.gitlab_dotcom.gitlab_dotcom_security_scans_dedupe_source AS scans INNER JOIN prep.gitlab_dotcom.gitlab_dotcom_ci_builds_dedupe_source AS builds ON builds.id = scans.build_id AND builds.type = 'Ci::Build'  LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_projects_dedupe_source AS projects ON projects.id = scans.project_id LEFT JOIN prep.gitlab_dotcom.gitlab_dotcom_namespaces_dedupe_source AS namespaces ON namespaces.id = projects.namespace_id  LEFT JOIN prod.legacy.gitlab_dotcom_namespaces_xf AS namespaces_xf ON namespaces.id = namespaces_xf.namespace_id WHERE scans.scan_type = 1 AND (builds.retried = FALSE OR builds.retried IS NULL) AND (builds.status IN ('success')) AND scans.created_at BETWEEN between_start_date AND between_end_date GROUP BY 1",
    "time_window_query": true,
    "level": "namespace"
  }
]
