connection_info:
  user: GITLAB_COM_DB_USER
  pass: GITLAB_COM_DB_PASS
  host: GITLAB_COM_DB_HOST
  database: GITLAB_COM_DB_NAME
  port: PG_PORT
tables:
  ci_build_trace_sections:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , date_start
      , date_end
      , build_id
      , section_name_id
      FROM ci_build_trace_sections
    export_schema: 'gitlab_dotcom'
    export_table: ci_build_trace_sections
    export_table_primary_key: id
  ci_builds:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , status
      , finished_at
      , trace
      , created_at
      , updated_at
      , started_at
      , runner_id
      , coverage
      , commit_id
      , commands
      , name
      , options
      , allow_failure
      , stage
      , trigger_request_id
      , stage_idx
      , tag
      , ref
      , user_id
      , type
      , target_url
      , description
      , artifacts_file
      , project_id
      , artifacts_metadata
      , erased_by_id
      , erased_at
      , artifacts_expire_at
      , environment
      , artifacts_size
      , "when"
      , yaml_variables
      , queued_at
      , token
      , lock_version
      , coverage_regex
      , auto_canceled_by_id
      , retried
      , stage_id
      , artifacts_file_store
      , artifacts_metadata_store
      , protected
      , failure_reason
      , scheduled_at
      , token_encrypted
      , upstream_pipeline_id
      FROM ci_builds
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_dotcom'
    export_table: ci_builds
    export_table_primary_key: id
  ci_builds_metadata:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , build_id
      , project_id
      , timeout
      , timeout_source
      , config_options
      , config_variables
      FROM ci_builds_metadata
    export_schema: 'gitlab_dotcom'
    export_table: ci_builds_metadata
    export_table_primary_key: id
  ci_builds_runner_session:
    import_db: GITLAB_DB
    import_query: >
      SELECT build_id
      , url
      , certificate
      , "authorization"
      FROM ci_builds_runner_session
    export_schema: 'gitlab_dotcom'
    export_table: ci_builds_runner_session
    export_table_primary_key: build_id
  ci_group_variables:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , key
      , value
      , encrypted_value
      , encrypted_value_salt
      , encrypted_value_iv
      , group_id
      , protected
      , created_at
      , updated_at
      , masked
      , variable_type
      FROM ci_group_variables
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_dotcom'
    export_table: ci_group_variables
    export_table_primary_key: id
  approvals:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , merge_request_id
      , user_id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') as created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') as updated_at
      FROM approvals
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'approvals'
    export_table_primary_key: id
  approver_groups:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , target_type
      , group_id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') as created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') as updated_at
      FROM approver_groups
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'approver_groups'
    export_table_primary_key: id
  audit_events:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , author_id
      , type
      , entity_id
      , entity_type
      , details
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') as created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') as updated_at
      FROM audit_events
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'audit_events'
    export_table_primary_key: id
  board_assignees:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , board_id
      , assignee_id
      FROM board_assignees
    export_schema: 'gitlab_com'
    export_table: 'board_assignees'
    export_table_primary_key: id
  board_labels:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , board_id
      , label_id
      FROM board_labels
    export_schema: 'gitlab_com'
    export_table: 'board_labels'
    export_table_primary_key: id
  boards:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') as created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') as updated_at
      , milestone_id
      , group_id
      , weight
      FROM boards
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'boards'
    export_table_primary_key: id
  ci_build_trace_chunks:
    import_db: GITLAB_DB
    import_query: >
      SELECT build_id
      , chunk_index
      , data_store
      , raw_data
      FROM ci_build_trace_chunks
    export_schema: 'gitlab_dotcom'
    export_table: ci_build_trace_chunks
    export_table_primary_key: build_id
  ci_build_trace_section_names:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , name
      FROM ci_build_trace_section_names
    export_schema: 'gitlab_dotcom'
    export_table: ci_build_trace_section_names
    export_table_primary_key: id
  epic_issues:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , epic_id
      , issue_id
      , relative_position
      FROM epic_issues
    export_schema: 'gitlab_com'
    export_table: 'epic_issues'
    export_table_primary_key: id
  epics:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , iid
      , milestone_id
      , group_id
      , author_id
      , assignee_id
      , iid
      , updated_by_id
      , last_edited_by_id
      , lock_version
      , TO_CHAR(start_date, 'YYYY-MM-DD HH:MI:SS') as start_date
      , TO_CHAR(end_date, 'YYYY-MM-DD HH:MI:SS') as end_date
      , TO_CHAR(last_edited_at, 'YYYY-MM-DD HH:MI:SS') as last_edited_at
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') as created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') as updated_at
      , title
      , description
      , state
      , closed_at
      FROM epics
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'epics'
    export_table_primary_key: id
  epic_metrics:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , epic_id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') as created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') as updated_at
      FROM epic_metrics
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'epic_metrics'
    export_table_primary_key: id
  gitlab_subscriptions:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') AS created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') AS updated_at
      , TO_CHAR(start_date, 'YYYY-MM-DD HH:MI:SS') AS start_date
      , TO_CHAR(end_date, 'YYYY-MM-DD HH:MI:SS') AS end_date
      , TO_CHAR(trial_ends_on, 'YYYY-MM-DD HH:MI:SS') AS trial_ends_on
      , namespace_id
      , hosted_plan_id
      , max_seats_used
      , seats
      , trial
      FROM gitlab_subscriptions
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'gitlab_subscriptions'
    export_table_primary_key: id
  issues:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , iid
      , title
      , author_id
      , project_id
      , created_at
      , updated_at
      , confidential
      , description
      , milestone_id
      , state
      , updated_by_id
      , weight
      , due_date
      , moved_to_id
      , lock_version
      , time_estimate
      , last_edited_at
      , last_edited_by_id
      , discussion_locked
      , closed_at
      FROM issues
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    additional_filtering: AND created_at NOT IN ( '0001-01-01 00:00:00+00', '1000-01-01 00:00:00+00', '10000-01-01 00:00:00+00')
    export_schema: 'gitlab_com'
    export_table: 'issues'
    export_table_primary_key: id
  labels:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , title
      , color
      , project_id
      , created_at
      , updated_at
      , template
      , type
      , group_id
      FROM labels
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'labels'
    export_table_primary_key: id
  issue_assignees:
    import_db: GITLAB_DB
    import_query: >
      SELECT user_id
      , issue_id
      FROM issue_assignees
    export_schema: 'gitlab_com'
    export_table: 'issue_assignees'
    export_table_primary_key: user_id
  issue_links:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , source_id
      , target_id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') as created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') as updated_at
      FROM issue_links
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'issue_links'
    export_table_primary_key: id
  issue_metrics:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , issue_id
      , first_mentioned_in_commit_at
      , first_associated_with_milestone_at
      , first_added_to_board_at
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') as created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') as updated_at
      FROM issue_metrics
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'issue_metrics'
    export_table_primary_key: id
  label_links:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , label_id
      , target_id
      , target_type
      , created_at
      , updated_at
      FROM label_links
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'label_links'
    export_table_primary_key: id
  label_priorities:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , label_id
      , priority
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') as created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') as updated_at
      FROM label_priorities
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'label_priorities'
    export_table_primary_key: id
  licenses:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') as created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') as updated_at
      FROM licenses
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'licenses'
    export_table_primary_key: id
  merge_request_diffs:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , state
      , merge_request_id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') AS created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') AS updated_at
      , base_commit_sha
      , real_size
      , head_commit_sha
      , start_commit_sha
      , commits_count
      FROM merge_request_diffs
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'merge_request_diffs'
    export_table_primary_key: id
  merge_request_metrics:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , merge_request_id
      , latest_build_started_at
      , latest_build_finished_at
      , first_deployed_to_production_at
      , merged_at
      , created_at
      , updated_at
      , pipeline_id
      , merged_by_id
      , latest_closed_by_id
      , latest_closed_at
      FROM merge_request_metrics
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'merge_request_metrics'
    export_table_primary_key: id
  merge_requests:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , iid
      , target_branch
      , source_branch
      , source_project_id
      , author_id
      , assignee_id
      , created_at
      , updated_at
      , milestone_id
      , state
      , merge_status
      , target_project_id
      , updated_by_id
      , merge_error
      , merge_params
      , merge_when_pipeline_succeeds
      , merge_user_id
      , approvals_before_merge
      , lock_version
      , time_estimate
      , squash
      , last_edited_at
      , last_edited_by_id
      , head_pipeline_id
      , discussion_locked
      , latest_merge_request_diff_id
      , allow_maintainer_to_push
      FROM merge_requests
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'merge_requests'
    export_table_primary_key: id
  merge_requests_closing_issues:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , merge_request_id
      , issue_id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') AS created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') AS updated_at
      FROM merge_requests_closing_issues
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'merge_requests_closing_issues'
    export_table_primary_key: id
  milestones:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , iid
      , project_id
      , due_date
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') AS created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') AS updated_at
      , state
      , start_date
      , group_id
      FROM milestones
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'milestones'
    export_table_primary_key: id
  namespace_statistics:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , namespace_id
      , shared_runners_seconds
      , shared_runners_seconds_last_reset
      FROM namespace_statistics
    export_schema: 'gitlab_com'
    export_table: 'namespace_statistics'
    export_table_primary_key: id
  members:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , access_level
      , source_id
      , source_type
      , user_id
      , notification_level
      , type
      , created_at
      , created_by_id
      , invite_email
      , invite_accepted_at
      , requested_at
      , expires_at
      , ldap
      , override
      FROM members
    export_schema: 'gitlab_com'
    export_table: 'members'
    export_table_primary_key: id
  namespaces:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , name
      , path
      , owner_id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') AS created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') AS updated_at
      , type
      , avatar
      , membership_lock
      , share_with_group_lock
      , visibility_level
      , request_access_enabled
      , ldap_sync_status
      , ldap_sync_error
      , TO_CHAR(ldap_sync_last_update_at, 'YYYY-MM-DD HH:MI:SS') AS ldap_sync_last_update_at
      , TO_CHAR(ldap_sync_last_successful_update_at, 'YYYY-MM-DD HH:MI:SS') AS ldap_sync_last_successful_update_at
      , TO_CHAR(ldap_sync_last_sync_at, 'YYYY-MM-DD HH:MI:SS') AS ldap_sync_last_sync_at
      , lfs_enabled
      , parent_id
      , shared_runners_minutes_limit
      , repository_size_limit
      , require_two_factor_authentication
      , two_factor_grace_period
      , plan_id
      , project_creation_level
      , auto_devops_enabled
      FROM namespaces
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'namespaces'
    export_table_primary_key: id
  notes:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , note
      , noteable_type
      , author_id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') as created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') as updated_at
      , project_id
      , attachment
      , line_code
      , commit_id
      , noteable_id
      , system
      , st_diff
      , updated_by_id
      , type
      , position
      , original_position
      , resolved_at
      , resolved_by_id
      , discussion_id
      , note_html
      , cached_markdown_version
      , change_position
      , resolved_by_push
      FROM notes
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'notes'
    export_table_primary_key: id
  notification_settings:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , user_id
      , source_id
      , source_type
      , level
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') AS created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') AS updated_at
      , new_note
      , new_issue
      , reopen_issue
      , close_issue
      , reassign_issue
      , new_merge_request
      , reopen_merge_request
      , close_merge_request
      , reassign_merge_request
      , merge_merge_request
      , failed_pipeline
      , success_pipeline
      FROM notification_settings
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'notification_settings'
    export_table_primary_key: id
  oauth_access_tokens:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , resource_owner_id
      , application_id
      , token
      , refresh_token
      , expires_in
      , revoked_at
      , created_at
      , scopes
      FROM oauth_access_tokens
    export_schema: 'gitlab_com'
    export_table: 'oauth_access_tokens'
    export_table_primary_key: id
  project_authorizations:
    import_db: GITLAB_DB
    import_query: >
      SELECT user_id
      , project_id
      , access_level
      FROM project_authorizations
    export_schema: 'gitlab_com'
    export_table: 'project_authorizations'
    export_table_primary_key: user_id
  project_auto_devops:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') AS created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') AS updated_at
      , enabled
      FROM project_auto_devops
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'project_auto_devops'
    export_table_primary_key: id
  project_custom_attributes:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') AS created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') AS updated_at
      , project_id
      , key
      , value
      FROM project_custom_attributes
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'project_custom_attributes'
    export_table_primary_key: id
  project_features:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , merge_requests_access_level
      , issues_access_level
      , wiki_access_level
      , snippets_access_level
      , builds_access_level
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') AS created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') AS updated_at
      , repository_access_level
      FROM project_features
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'project_features'
    export_table_primary_key: id
  project_group_links:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , group_id
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') AS created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') AS updated_at
      , group_access
      , TO_CHAR(expires_at, 'YYYY-MM-DD HH:MI:SS') AS expires_at
      FROM project_group_links
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'project_group_links'
    export_table_primary_key: id
  project_import_data:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      FROM project_import_data
    export_schema: 'gitlab_com'
    export_table: 'project_import_data'
    export_table_primary_key: id
  project_mirror_data:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , retry_count
      , TO_CHAR(last_update_started_at, 'YYYY-MM-DD HH:MI:SS') AS last_update_started_at
      , TO_CHAR(last_update_scheduled_at, 'YYYY-MM-DD HH:MI:SS') AS last_update_scheduled_at
      , TO_CHAR(next_execution_timestamp, 'YYYY-MM-DD HH:MI:SS') AS next_execution_timestamp
      FROM project_mirror_data
    export_schema: 'gitlab_com'
    export_table: 'project_mirror_data'
    export_table_primary_key: id
  project_repository_states:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , last_repository_verification_failure
      , last_wiki_verification_failure
      FROM project_repository_states
    export_schema: 'gitlab_com'
    export_table: 'project_repository_states'
    export_table_primary_key: id
  project_statistics:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , project_id
      , namespace_id
      , commit_count
      , storage_size
      , repository_size
      , lfs_objects_size
      , build_artifacts_size
      , shared_runners_seconds
      , shared_runners_seconds_last_reset
      FROM project_statistics
    export_schema: 'gitlab_com'
    export_table: 'project_statistics'
    export_table_primary_key: id
  projects:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , name
      , path
      , description
      , created_at
      , updated_at
      , creator_id
      , namespace_id
      , last_activity_at
      , import_url
      , visibility_level
      , archived
      , avatar
      , merge_requests_template
      , star_count
      , merge_requests_rebase_enabled
      , import_type
      , import_source
      , approvals_before_merge
      , reset_approvals_on_push
      , merge_requests_ff_only_enabled
      , issues_template
      , mirror
      , mirror_user_id
      , shared_runners_enabled
      , build_coverage_regex
      , build_allow_git_fetch
      , build_timeout
      , mirror_trigger_builds
      , pending_delete
      , public_builds
      , last_repository_check_failed
      , last_repository_check_at
      , container_registry_enabled
      , only_allow_merge_if_pipeline_succeeds
      , has_external_issue_tracker
      , repository_storage
      , repository_read_only
      , request_access_enabled
      , has_external_wiki
      , ci_config_path
      , lfs_enabled
      , only_allow_merge_if_all_discussions_are_resolved
      , repository_size_limit
      , printing_merge_request_link_enabled
      , auto_cancel_pending_pipelines
      , service_desk_enabled
      , delete_error
      , last_repository_updated_at
      , disable_overriding_approvers_per_merge_request
      , storage_version
      , resolve_outdated_diff_discussions
      , remote_mirror_available_overridden
      , only_mirror_protected_branches
      , pull_mirror_available_overridden
      , mirror_overwrites_diverged_branches
      , external_authorization_classification_label
      FROM projects
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'projects'
    export_table_primary_key: id
  subscriptions:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , user_id
      , subscribable_id
      , subscribable_type
      , subscribed
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') AS created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') AS updated_at
      , project_id
      FROM subscriptions
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'subscriptions'
    export_table_primary_key: id
  users:
    import_db: GITLAB_DB
    import_query: >
      SELECT id
      , TO_CHAR(remember_created_at, 'YYYY-MM-DD HH:MI:SS') AS remember_created_at
      , sign_in_count
      , TO_CHAR(current_sign_in_at, 'YYYY-MM-DD HH:MI:SS') AS current_sign_in_at
      , TO_CHAR(last_sign_in_at, 'YYYY-MM-DD HH:MI:SS') AS last_sign_in_at
      , current_sign_in_ip
      , last_sign_in_ip
      , TO_CHAR(created_at, 'YYYY-MM-DD HH:MI:SS') AS created_at
      , TO_CHAR(updated_at, 'YYYY-MM-DD HH:MI:SS') AS updated_at
      , admin
      , projects_limit
      , failed_attempts
      , TO_CHAR(locked_at, 'YYYY-MM-DD HH:MI:SS') AS locked_at
      , can_create_group
      , can_create_team
      , state
      , color_scheme_id
      , TO_CHAR(password_expires_at, 'YYYY-MM-DD HH:MI:SS') AS password_expires_at
      , created_by_id
      , TO_CHAR(last_credential_check_at, 'YYYY-MM-DD HH:MI:SS') AS last_credential_check_at
      , avatar
      , TO_CHAR(confirmed_at, 'YYYY-MM-DD HH:MI:SS') AS confirmed_at
      , TO_CHAR(confirmation_sent_at, 'YYYY-MM-DD HH:MI:SS') AS confirmation_sent_at
      , unconfirmed_email
      , hide_no_ssh_key
      , website_url
      , admin_email_unsubscribed_at
      , notification_email
      , hide_no_password
      , password_automatically_set
      , location
      , public_email
      , dashboard
      , project_view
      , consumed_timestep
      , layout
      , hide_project_limit
      , note
      , otp_grace_period_started_at
      , TO_CHAR(otp_grace_period_started_at, 'YYYY-MM-DD HH:MI:SS') AS otp_grace_period_started_at
      , notification_email
      , hide_no_password
      , external
      , organization
      , auditor
      , require_two_factor_authentication_from_group
      , two_factor_grace_period
      , ghost
      , last_activity_on
      , notified_of_own_activity
      , preferred_language
      , theme_id
      FROM users
      WHERE updated_at BETWEEN '{EXECUTION_DATE}'::timestamp - interval '{HOURS} hours'
        AND '{EXECUTION_DATE}'::timestamp
    export_schema: 'gitlab_com'
    export_table: 'users'
    export_table_primary_key: id
