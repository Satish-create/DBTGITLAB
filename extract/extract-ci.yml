# Job definitions
#
.job_template: &extract_definition
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest
  tags:
    - analytics

.variables: &meltano_extract_job__variables
  SINGER_RUN_DIR: /run/singer
  TARGET_REJECTED_DIR: $SINGER_RUN_DIR/target.rejected
  MELTANO_JOB_ID: $CI_JOB_NAME
  SF_ROLE: LOADER
  SF_WAREHOUSE: LOADING

.meltano_extract_job: &meltano_extract_job
  stage: extract
  <<: *extract_definition
  variables: *meltano_extract_job__variables
  image:
    name: registry.gitlab.com/meltano/meltano/runner:bc2ead1146c017a4ad12c88d65f19dd968a23d8b
    entrypoint: [""]
  script:
    - pip3 install -r orchestration/requirements.txt # required by `ci_helpers`
    - export SF_DATABASE="${SF_DATABASE^^}" # database name must be in CAPS
    - echo "Connecting to $SF_USER@$SF_ACCOUNT/$SF_DATABASE/$SF_SCHEMA"
    - meltano install
    - ci_helpers.py use_proxy "meltano elt $MELTANO_JOB_ID --extractor $MELTANO_EXTRACTOR --loader $MELTANO_LOADER --transform skip"

# =======
# Marketo
# =======
.variables: &marketo_extract_meltano__variables
  <<: *meltano_extract_job__variables
  MELTANO_EXTRACTOR: tap-marketo
  MELTANO_LOADER: target-snowflake
  MARKETO_START_TIME: "2018-10-01T00:00:00Z"
  MARKETO_CLIENT_ID: $MKTO_CLIENT_ID
  MARKETO_CLIENT_SECRET: $MKTO_CLIENT_SECRET
  MARKETO_ENDPOINT: "$MKTO_ENDPOINT/rest"
  MARKETO_IDENTITY: "$MKTO_ENDPOINT/identity"
  SF_DATABASE: $CI_COMMIT_REF_NAME
  SF_SCHEMA: MARKETO # must be in CAPS

.marketo_extract_meltano: &marketo_extract_meltano
  <<: *meltano_extract_job
  variables: *marketo_extract_meltano__variables

.marketo_extract: &marketo_extract
  stage: extract
  <<: *extract_definition
  script:
    - ci_helpers.py use_proxy "bash extract/mkto/mkto_processor.sh"

.zendesk_meltano_extract: &zendesk_meltano_extract
  stage: extract
  <<: *extract_definition
  image:
    name: registry.gitlab.com/meltano/meltano/singer_runner:0.0.1
    entrypoint: [""]
  variables:
    <<: *meltano_extract_job__variables
    MELTANO_EXTRACTOR: tap-zendesk
    MELTANO_LOADER: target-snowflake
    ZENDESK_START_DATE: "2018-10-01T00:00:00Z"
    SF_SCHEMA: TAP_ZENDESK # must be in CAPS
  script:
    - export SF_DATABASE="${SF_DATABASE^^}" # database name must be in CAPS
    - echo "Connecting to $SF_USER@$SF_ACCOUNT/$SF_DATABASE/$SF_SCHEMA"
    - pip install -r orchestration/requirements.txt # TODO: add this to `meltano/meltano/runner`
    - ci_helpers.py use_proxy "meltano extract $CI_JOB_NAME $MELTANO_EXTRACTOR --loader_name=$MELTANO_LOADER"

.netsuite_extract: &netsuite_extract
  stage: extract
  <<: *extract_definition
  script:
    - check_ci_cd_vars.py --file extract/netsuite/src/config/required_ci_cd_vars.yaml
    - ci_helpers.py use_proxy "python3 extract/netsuite/src/ --schema netsuite apply_schema"
    - ci_helpers.py use_proxy "python3 extract/netsuite/src/ --schema netsuite export --days 3"
    - ci_helpers.py use_proxy "python3 extract/netsuite/src/ --schema netsuite backlog --days 15"

.netsuite_backlog: &netsuite_backlog
  stage: extract
  <<: *extract_definition
  script:
    - check_ci_cd_vars.py --file extract/netsuite/src/config/required_ci_cd_vars.yaml
    - ci_helpers.py use_proxy "python3 extract/netsuite/src/ --schema netsuite backlog --days 60"

.netsuite_currency_rate_backfill: &netsuite_currency_rate_backfill
  stage: extract
  <<: *extract_definition
  script:
    - check_ci_cd_vars.py --file extract/netsuite/src/config/required_ci_cd_vars.yaml
    - ci_helpers.py use_proxy "python3 extract/netsuite/src/ --schema netsuite backlog --backfill-entity currency_rate --days 1460"

.postgres_db_extract: &postgres_db_extract
  stage: extract
  <<: *extract_definition
  image:
    name: registry.gitlab.com/meltano/meltano/runner:v0.1.4
    entrypoint: [""]  
  script:
    - pip3 install -r orchestration/requirements.txt # required by `ci_helpers`
    - export SNOWFLAKE_DATABASE="${SNOWFLAKE_DATABASE^^}" # database name must be in CAPS
    - check_ci_cd_vars.py --file extract/postgres/config/required_vars.yaml
    - meltano install
    - python3 extract/postgres --import_db $EXPORT_DATABASE
    - extract/postgres/run_custom_tap_target.sh

.sheetload: &sheetload
  stage: extract
  <<: *extract_definition
  script:
    - pip3 install -U pyasn1-modules
    - ci_helpers.py use_proxy "python3 extract/historical/sheetload.py sheet
          historical.sales_quota.sales_quota
          historical.headcount.headcount
          historical.metrics.metrics
          historical.regional_quotas.transposed
          historical.google_referrals.google_referrals
          historical.sales_weekly_forecast.sales_weekly_forecast
          historical.ccodashboard.ccodashboard_actuals
          historical.ccodashboard.ccodashboard_goals
          historical.crodashboard.crodashboard_actuals
          historical.crodashboard.crodashboard_goals
          historical.cfodashboard.cfodashboard_actuals
          historical.cfodashboard.cfodashboard_goals
          historical.vpedashboard.vpedashboard_actuals
          historical.vpedashboard.vpedashboard_goals
          historical.cmodashboard.cmodashboard_actuals
          historical.cmodashboard.cmodashboard_goals
          historical.alliancesdashboard.alliancesdashboard_actuals
          historical.alliancesdashboard.alliancesdashboard_goals"

# =====
# Zuora
# =====
.variables: &zuora_extract__variables
  <<: *meltano_extract_job__variables
  MELTANO_EXTRACTOR: tap-zuora
  MELTANO_LOADER: target-snowflake
  ZUORA_START_DATE: "2018-10-01T00:00:00Z"
  SF_SCHEMA: ZUORA # must be in CAPS

.zuora_extract: &zuora_extract
  variables:
    FIXED_ZUORA_PASSWORD: $ZUORA_PASSWORD
  stage: extract
  <<: *extract_definition
  script:
    - envsubst < "extract/config/environment.conf.template" > "extract/config/environment.conf"
    - ci_helpers.py use_proxy "python3 extract/zuora/zuora_export.py"

.zuora_extract_meltano: &zuora_extract_meltano
  <<: *meltano_extract_job
  image:
    name: registry.gitlab.com/meltano/meltano/runner:bc2ead1146c017a4ad12c88d65f19dd968a23d8b
    entrypoint: [""]
  variables: *zuora_extract__variables
  artifacts:
    paths:
      - .meltano/run/tap-zuora/tap.properties.json
      - .meltano/run/tap-zuora/state.json

.sfdc_extract: &sfdc_extract
  variables:
    FIXED_SFDC_PASSWORD: $SFDC_PASSWORD_NOTOKEN
  stage: extract
  <<: *extract_definition
  script:
    - pip3 install salesforce-bulk # TODO: add me to the container
    - ci_helpers.py use_proxy "python3 extract/sfdc/src/ --schema sfdc apply_schema"
    - ci_helpers.py use_proxy "python3 extract/sfdc/src/ --schema sfdc export"

# ==========
# Salesforce
# ==========
.variables: &sfdc_extract_meltano__variables
  <<: *meltano_extract_job__variables
  MELTANO_EXTRACTOR: tap-salesforce
  MELTANO_LOADER: target-snowflake
  SFDC_START_DATE: "2018-10-01T00:00:00Z"
  SFDC_PASSWORD: $SFDC_PASSWORD_NOTOKEN
  SF_SCHEMA: SALESFORCE # must be in CAPS
  SF_DATABASE: $CI_COMMIT_REF_NAME

.sfdc_extract_meltano: &sfdc_extract_meltano
  stage: extract
  <<: *extract_definition
  variables: *sfdc_extract_meltano__variables
  image:
    name: registry.gitlab.com/meltano/meltano/runner:58cfc6349ba4b5769b79c3f218464eee65f253de
    entrypoint: [""]
  variables:
    <<: *meltano_extract_job__variables
    MELTANO_EXTRACTOR: tap-salesforce
    MELTANO_LOADER: target-snowflake
    SFDC_START_DATE: "2018-10-01T00:00:00Z"
    SFDC_PASSWORD: $SFDC_PASSWORD_NOTOKEN
    SF_SCHEMA: SALESFORCE # must be in CAPS
  script:
    - pip3 install -r orchestration/requirements.txt # required by `ci_helpers`
    - export SF_DATABASE="${SF_DATABASE^^}" # database name must be in CAPS
    - echo "Connecting to $SF_USER@$SF_ACCOUNT/$SF_DATABASE/$SF_SCHEMA"
    - meltano install
    - ci_helpers.py use_proxy "meltano elt $MELTANO_JOB_ID --extractor $MELTANO_EXTRACTOR --loader $MELTANO_LOADER --transform skip"

.domains_extract: &domains_extract
  stage: extract
  <<: *extract_definition
  script:
    - ci_helpers.py use_proxy "bash transform/hosts_to_sfdc/python_timecheck.sh"

.stripe_extract_githost: &stripe_extract_githost
  variables:
    GITHOST_STRIPE_API_KEY_SK: $GITHOST_STRIPE_API_KEY_SK
  stage: extract
  <<: *extract_definition
  script:
    - ci_helpers.py use_proxy "python3 extract/stripe/src --schema stripe_githost apply_schema"
    - ci_helpers.py use_proxy "python3 extract/stripe/src --schema stripe_githost --days=7 export"

.stripe_extract_about_gitlab: &stripe_extract_about_gitlab
  variables:
    ABOUT_GITLAB_STRIPE_API_KEY_SK: $ABOUT_GITLAB_STRIPE_API_KEY_SK
  stage: extract
  <<: *extract_definition
  script:
    - ci_helpers.py use_proxy "python3 extract/stripe/src --schema stripe_about_gitlab apply_schema"
    - ci_helpers.py use_proxy "python3 extract/stripe/src --schema stripe_about_gitlab --days=7 export"

.gitlab_extract: &gitlab_extract
  stage: extract
  retry: 1
  <<: *extract_definition
  script:
    - ci_helpers.py use_proxy "python3 extract/gitlab/src -S gitlab apply_schema"
    - ci_helpers.py use_proxy "python3 extract/gitlab/src -S gitlab export"

## Production Jobs

domains:
  <<: *domains_extract
  only:
    refs:
      - master
    variables:
      - $DOMAINS

gitlab:
  <<: *gitlab_extract
  only:
    refs:
      - master
    variables:
      - $GITLAB

marketo:
  <<: *marketo_extract
  only:
    refs:
      - master
    variables:
      - $MARKETO

marketo_snowflake:
  <<: *marketo_extract_meltano
  variables:
    <<: *marketo_extract_meltano__variables
    SF_DATABASE: RAW
  only:
    refs:
      - master
    variables:
      - $MARKETO

netsuite:
  <<: *netsuite_extract
  only:
    refs:
      - master
    variables:
      - $NETSUITE

version_db:
  stage: extract
  <<: *postgres_db_extract
  variables:
    SNOWFLAKE_DATABASE: $SNOWFLAKE_LOAD_DATABASE
    EXPORT_DATABASE: "version"
  only:
    refs:
      - master
    variables:
      - $PINGS

customers_db:
  stage: extract
  <<: *postgres_db_extract
  variables:
    SNOWFLAKE_DATABASE: $SNOWFLAKE_LOAD_DATABASE
    EXPORT_DATABASE: "customers"
  only:
    refs:
      - master
    variables:
      - $PINGS

license_db:
  stage: extract
  <<: *postgres_db_extract
  variables:
    SNOWFLAKE_DATABASE: $SNOWFLAKE_LOAD_DATABASE
    EXPORT_DATABASE: "license"
  only:
    refs:
      - master
    variables:
      - $PINGS

ci_stats_db:
  stage: extract
  <<: *postgres_db_extract
  variables:
    SNOWFLAKE_DATABASE: $SNOWFLAKE_LOAD_DATABASE
    EXPORT_DATABASE: "ci_stats"
  only:
    refs:
      - master
    variables:
      - $CI_STATS

gitlab_profiler_db:
  stage: extract
  <<: *postgres_db_extract
  variables:
    SNOWFLAKE_DATABASE: $SNOWFLAKE_LOAD_DATABASE
    EXPORT_DATABASE: "gitlab_profiler"
  only:
    refs:
      - master
    variables:
      - $GITLAB_PROFILER

sfdc:
  <<: *sfdc_extract
  only:
    refs:
      - master
    variables:
      - $SFDC

sfdc_snowflake:
  <<: *sfdc_extract_meltano
  variables:
    <<: *sfdc_extract_meltano__variables
    SF_DATABASE: RAW
  only:
    refs:
      - master
    variables:
      - $SFDC_MELTANO

sheetload:
  stage: extract
  <<: *sheetload
  only:
    refs:
      - master
    variables:
      - $SHEETLOAD

stripe_about_gitlab:
  <<: *stripe_extract_about_gitlab
  only:
    refs:
      - master
    variables:
      - $STRIPE_ABOUT_GITLAB

stripe_githost:
  <<: *stripe_extract_githost
  only:
    refs:
      - master
    variables:
      - $STRIPE_GITHOST

zendesk_snowflake:
  <<: *zendesk_meltano_extract
  only:
    refs:
      - master
    variables:
      - $ZENDESK_MELTANO

zuora:
  <<: *zuora_extract
  only:
    refs:
      - master
    variables:
      - $ZUORA

zuora_snowflake:
  <<: *zuora_extract_meltano
  variables:
    <<: *zuora_extract__variables
    SF_DATABASE: RAW
  only:
    refs:
      - master
    variables:
      - $ZUORA

## Review Jobs

domains_manual:
  <<: *domains_extract
  only:
    - branches
  except:
    - master
  when: manual

gitlab_manual:
  <<: *gitlab_extract
  only:
    - branches
  except:
    - master
  when: manual

marketo_manual:
  <<: *marketo_extract
  only:
    - branches
  except:
    - master
  when: manual

marketo_snowflake_manual:
  <<: *marketo_extract_meltano
  only:
    - branches
  except:
    - master
  when: manual

netsuite_backlog_manual:
  stage: extract
  <<: *netsuite_backlog
  when: manual

netsuite_currency_rate_backfill_manual:
  stage: extract
  <<: *netsuite_currency_rate_backfill
  when: manual

netsuite_manual:
  <<: *netsuite_extract
  only:
    - branches
  except:
    - master
  when: manual

version_db_manual:
  stage: extract
  <<: *postgres_db_extract
  variables:
    SNOWFLAKE_DATABASE: $CI_COMMIT_REF_NAME
    EXPORT_DATABASE: "version"
  only:
    - branches
  except:
    - master
  when: manual

customers_db_manual:
  stage: extract
  <<: *postgres_db_extract
  variables:
    SNOWFLAKE_DATABASE: $CI_COMMIT_REF_NAME
    EXPORT_DATABASE: "customers"
  only:
    - branches
  except:
    - master
  when: manual

license_db_manual:
  stage: extract
  <<: *postgres_db_extract
  variables:
    SNOWFLAKE_DATABASE: $CI_COMMIT_REF_NAME
    EXPORT_DATABASE: "license"
  only:
    - branches
  except:
    - master
  when: manual

ci_stats_db_manual:
  stage: extract
  <<: *postgres_db_extract
  variables:
    SNOWFLAKE_DATABASE: $CI_COMMIT_REF_NAME
    EXPORT_DATABASE: "ci_stats"
  only:
    - branches
  except:
    - master
  when: manual

gitlab_profiler_db_manual:
  stage: extract
  <<: *postgres_db_extract
  variables:
    SNOWFLAKE_DATABASE: $CI_COMMIT_REF_NAME
    EXPORT_DATABASE: "gitlab_profiler"
  only:
    - branches
  except:
    - master
  when: manual

sfdc_manual:
  <<: *sfdc_extract
  only:
    - branches
  except:
    - master
  when: manual

sfdc_snowflake_manual:
  <<: *sfdc_extract_meltano
  only:
    - branches
  except:
    - master
  when: manual

sheetload_manual:
  stage: extract
  <<: *sheetload
  when: manual

stripe_extract_about_gitlab_manual:
  <<: *stripe_extract_about_gitlab
  only:
    - branches
  except:
    - master
  when: manual

stripe_extract_githost_manual:
  <<: *stripe_extract_githost
  only:
    - branches
  except:
    - master
  when: manual

zendesk_snowflake_manual:
  <<: *zendesk_meltano_extract
  only:
    - branches
  except:
    - master
  when: manual

zuora_manual:
  <<: *zuora_extract
  only:
    - branches
  except:
    - master
  when: manual

zuora_snowflake_manual:
  <<: *zuora_extract_meltano
  only:
    - branches
  except:
    - master
  when: manual


# Stage: test

.test_job_template: &test_job_template
  image: registry.gitlab.com/meltano/meltano-elt/extract:latest

run_tests_manual:
  stage: test
  <<: *test_job_template
  script:
    - ci_helpers.py use_proxy "pytest -vv"
  when: manual
